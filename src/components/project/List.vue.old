<template>
  <div class="projects">
    <h1 id="changeText" class="text-center">{{ $t('projects.header') }}</h1>
      <div class="row justify-content-md-center">
        <div class="col">
          <b-card id="projectList" :header="$t('projects.list')">
            <b-form-input v-model="filter" placeholder="Type to Search" id="projectSearch"></b-form-input>
            <!-- Main table element -->
            <b-table striped hover
                    :items="projects.projects"
                    :fields="headers"
                    :current-page="currentPage"
                    :per-page="perPage"
                    :filter="filter"
                    id="projectTable"
            >
            <template slot="languages" scope="project">
              <ul>
                <li v-for="lang in project.item.languages">
                  {{ lang }}
                </li>
              </ul>
            </template>

            <template slot="actions" scope="project">
              <b-btn size="sm" variant="primary" :to="'projects/edit/' + project.item.id" class="m-t-5"><fa-icon name="edit" label="Edit"></fa-icon> Edit</b-btn>
              <b-btn size="sm" variant="danger" class="m-t-5" @click.native="deleteClick" :data-id="project.item.id"><fa-icon name="trash" label="Delete"></fa-icon> Delete</b-btn>
            </template>
            </b-table>
            <div v-if="projects.projects.length > 10" class="row justify-content-center" slot="footer">
              <b-pagination size="md" :total-rows="projects.projects.length" :per-page="perPage" v-model="currentPage" />
            </div>
            <div slot="footer">
              <b-button variant="primary" to="/projects/new">{{ $t('common.add') }}</b-button>
            </div>
          </b-card>
        </div>
      </div>
  </div>
</template>

<script>
import { mapState, mapGetters } from 'vuex'

export default {
  data () {
    return {
      headers: {
        picture: {
          label: ''
        },
        id: {
          label: 'ID',
          sortable: true
        },
        name: {
          label: 'Name',
          sortable: true
        },
        languages: {
          label: 'Languages'
        },
        actions: {
          label: 'Actions'
        }
      },
      perPage: 10,
      currentPage: 1,
      filter: null
    }
  },
  mounted () {
    // this.$store.dispatch('GET_PROJECTS')
  },
  methods: {
    deleteClick (e) {
      // Call the swal confirm dialog
      this.$swal({
        title: this._i18n.t('common.areYouSure'),
        text: this._i18n.t('common.noRevert'),
        type: 'warning',
        showCancelButton: true,
        showLoaderOnConfirm: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: this._i18n.t('common.deleteIt'),
        // Pre confirm it. Used for async requests. Close the dialoag when this is finished
        preConfirm: () => {
          return new Promise((resolve, reject) => {
            console.log(e.target)
            let project = this.getProjectById(parseInt(e.target.dataset.id, 10))
            if (project) {
              // If the project exists then call the delete
              this.$store.dispatch('DELETE_USER', parseInt(e.target.dataset.id, 10)).then(resolve)
            } else {
              reject(this._i18n.t('projects.couldNotFind'))
            }
          })
        },
        allowOutsideClick: false
      }).then(() => {
        this.$swal({
          type: 'success',
          title: this._i18n.t('common.deleted')
        })
      })
    }
  },
  computed: {
    ...mapGetters([
      'getProjectById'
    ]),
    ...mapState([
      'projects'
    ])
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style lang="scss" scoped>
  .project-icon {
    border-radius: 50%;
    height: 40px;
  }
</style>
